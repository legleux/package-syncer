name: Build release if needed

on:
  # schedule:
  #   - cron: '0 */1 * * *'
  push:
  workflow_dispatch:


jobs:
  release_needed:
    name: Check if need to release
    runs-on: ubuntu-latest
    outputs:
      release_needed: ${{ steps.release_needed.outputs.release_needed }}
    env:
      PAT_TOKEN: ${{ secrets.PAT_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Make commit
        run: |
          git commit --allow-empty -m"neat ${{ steps.git_rev.outputs.tag_name }}"
          git push
      - name: Check if release needed
        id: release_needed
        run: |
          pip install python-dotenv
          RELEASE_NEEDED=$(python main.py)
          echo ${RELEASE_NEEDED} > git_rev
          echo "release_needed=${RELEASE_NEEDED}" >> $GITHUB_OUTPUT
          echo "Need to release: ${RELEASE_NEEDED}"

      - name: Save git rev
        uses: actions/upload-artifact@v3
        with:
          name: git_rev
          path: ${{ github.workspace }}/git_rev

  make_release:
    name: Create release
    runs-on: ubuntu-latest
    needs: release_needed
    if: needs.release_needed.outputs.release_needed != 'false'
    env:
      PAT_TOKEN: ${{ secrets.PAT_TOKEN }}
    steps:

      - name: Checkout
        uses: actions/checkout@v2

      - name: Get git_rev file
        uses: actions/download-artifact@v3
        with:
          name: git_rev

      - name: Set variables git rev, branch name
        id: git_rev
        run: |
          git_rev=$(cat git_rev)
          echo "git_rev contains: ${git_rev}"
          IFS=_ read -r branch git_rev <<< $git_rev
          short_rev=${git_rev:0:8}
          echo "branch: ${branch}"
          echo "git_rev: ${git_rev}"
          echo "branch=${branch}" >> $GITHUB_OUTPUT
          echo "git_rev=${git_rev}" >> $GITHUB_OUTPUT
          echo "short_rev=${short_rev}" >> $GITHUB_OUTPUT
          echo "tag_name=${branch}_${short_rev}" >> $GITHUB_OUTPUT
          output=$(cat ${GITHUB_OUTPUT})
          echo "GITHUB_OUTPUT: ${output}"

      - name: Get latest artifact
        run: |
          pip install requests python-dotenv
          GIT_REV=${{ steps.git_rev.outputs.git_rev }}
          SHORT_REV=${{ steps.git_rev.outputs.short_rev }}
          BRANCH=${{ steps.git_rev.outputs.branch }}
          python get_artifact.py "${GIT_REV}" "${BRANCH}" >> $GITHUB_STEP_SUMMARY


      - uses: avakar/tag-and-release@v1
        with:
          tag_name: ${{ steps.git_rev.outputs.tag_name }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          name: "Release ${{ steps.git_rev.outputs.tag_name }}"
          tag_name: ${{ steps.git_rev.outputs.tag_name }}
          files: |
            ${{ github.workspace }}/*.deb
            ${{ github.workspace }}/*.rpm

      # - name: Make commit
      #   run: |
      #     git commit --allow-empty -m"${{ steps.git_rev.outputs.tag_name }}"
